{
    "f_type": "InteractionTemplate",
    "f_version": "1.0.0",
    "id": "effb1fbd83990de8c97fe9063827dfb6aade690f82eb846576b4f238b6e32496",
    "data": {
        "type": "InteractionTemplate",
        "interface": "",
        "messages": {
            "title": {
                "i18n": {
                    "en-US": "BltStaking Claim unstaked blt"
                }
            },
            "description": {
                "i18n": {
                    "en-US": "Claim unstaked tokens: {amount} BLT",
                    "zh-CN": "領取解除质押的代币: {amount} BLT 代币",
                    "zh-TW": "領取解除質押的代幣: {amount} BLT 代幣"
                }
            }
        },
        "cadence": "import BloctoToken from 0xBLOCTO_TOKEN_ADDRESS\nimport BloctoPass from 0xBLOCTO_PASS_ADDRESS\n\ntransaction(amount: UFix64, index: Int) {\n\n  // The Vault resource that holds the tokens that are being transferred\n  let vaultRef: &BloctoToken.Vault\n\n  // The private reference to user's BloctoPass\n  let bloctoPassRef: &BloctoPass.NFT\n\n  prepare(account: AuthAccount) {\n    // Get a reference to the account's stored vault\n    self.vaultRef = account.borrow<&BloctoToken.Vault>(from: BloctoToken.TokenStoragePath)\n      ?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n    // Get a reference to the account's BloctoPass\n    let bloctoPassCollectionRef = account.borrow<&BloctoPass.Collection>(from: /storage/bloctoPassCollection)\n      ?? panic(\"Could not borrow reference to the owner's BloctoPass collection!\")\n\n    let ids = bloctoPassCollectionRef.getIDs()\n\n    // Get a reference to the BloctoPass\n    self.bloctoPassRef = bloctoPassCollectionRef.borrowBloctoPassPrivate(id: ids[index])\n  }\n\n  execute {\n    self.bloctoPassRef.withdrawUnstakedTokens(amount: amount)\n\n    // Unlock as much as possible\n    let limit = self.bloctoPassRef.getTotalBalance() - self.bloctoPassRef.getLockupAmount()\n    let max = limit > amount ? amount : limit\n    \n    if (max > 0.0) {\n      self.vaultRef.deposit(from: <-self.bloctoPassRef.withdraw(amount: max))\n    }\n  } \n}",
        "dependencies": {
            "0xBLOCTO_TOKEN_ADDRESS": {
                "BloctoToken": {
                    "testnet": {
                        "address": "0x6e0797ac987005f5",
                        "contract": "BloctoToken",
                        "fq_address": "A.0x6e0797ac987005f5.BloctoToken",
                        "pin": "0326c320322c4e8dde768ba2975c384184fb7e41765c2c87e79a2040bfc71be8",
                        "pin_block_height": 139076288
                    }
                }
            },
            "0xBLOCTO_PASS_ADDRESS": {
                "BloctoPass": {
                    "testnet": {
                        "address": "0x7deafdfc288e422d",
                        "contract": "BloctoPass",
                        "fq_address": "A.0x7deafdfc288e422d.BloctoPass",
                        "pin": "3c7796c792dc130c2e565c8246de8a8d5add43e7f340efe20c52568c43602b36",
                        "pin_block_height": 139076432
                    }
                }
            }
        },
        "arguments": {
            "amount": {
                "index": 0,
                "type": "UFix64",
                "messages": {}
            },
            "index": {
                "index": 1,
                "type": "Int",
                "messages": {}
            }
        }
    }
}