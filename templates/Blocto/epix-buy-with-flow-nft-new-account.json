{
    "f_type": "InteractionTemplate",
    "f_version": "1.0.0",
    "id": "455a38bcc9c315d266b2c5933f6da72bdea3abff240d83541961e3b928a912af",
    "data": {
        "type": "InteractionTemplate",
        "interface": "",
        "messages": {
            "title": {
                "i18n": {
                    "en-US": "Epix Buy with flow nft new account"
                }
            },
            "description": {
                "i18n": {
                    "en-US": "Buy nft {nft_id} for {flowAmount} FLOW and store in a new account",
                    "zh-CN": "为 {flowAmount} FLOW 购买 nft {nft_id} 并存储在新帐户中",
                    "zh-TW": "為 {flowAmount} FLOW 購買 nft {nft_id} 並存儲在新帳戶中"
                }
            }
        },
        "cadence": "import FungibleToken from 0xFUNGIBLE_TOKEN_ADDRESS\nimport FlowToken from 0xFLOW_TOKEN_ADDRESS\nimport NonFungibleToken from 0xNON_FUNGIBLE_TOKEN_ADDRESS\nimport Epix from 0xEPIX_ADDRESS\n\npub fun trySetupFlow(acct: AuthAccount) {\n    // setup account to use flow tokens\n    if acct.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault) == nil {\n        // Create a new flow Vault and put it in storage\n        acct.save(<-FlowToken.createEmptyVault(), to: /storage/flowTokenVault)\n        // Create a public capability to the Vault that only exposes\n        // the deposit function through the Receiver interface\n        acct.link<&FlowToken.Vault{FungibleToken.Receiver}>(\n            /public/flowTokenReceiver,\n            target: /storage/flowTokenVault\n        )\n        // Create a public capability to the Vault that only exposes\n        // the balance field through the Balance interface\n        acct.link<&FlowToken.Vault{FungibleToken.Balance}>(\n            /public/flowTokenBalance,\n            target: /storage/flowTokenVault\n        )\n    }\n}\n\npub fun trySetupNft(acct: AuthAccount) {\n    // setup account to receive nfts from epix collection\n    if acct.borrow<&Epix.Collection>(from: Epix.CollectionStoragePath) == nil {\n        // Create a new empty collection\n        let collection <- Epix.createEmptyCollection()\n        // save it to the account\n        acct.save(<-collection, to: Epix.CollectionStoragePath)\n        // create a public capability for the collection\n        acct.link<&Epix.Collection{NonFungibleToken.CollectionPublic, Epix.EpixCollectionPublic}>(Epix.CollectionPublicPath as! CapabilityPath, target: Epix.CollectionStoragePath)\n    }\n}\n\npub fun createAccount(pubKeys: [String], payer: AuthAccount): AuthAccount {\n    let acct = AuthAccount(payer: payer)\n    for key in pubKeys {\n        acct.addPublicKey(key.decodeHex())\n    }\n    trySetupNft(acct: acct)\n    trySetupFlow(acct: acct)\n    return acct\n}\n\n// This transaction is for buying a NFT using flow tokens to a recipient account\ntransaction(flowAmount: UFix64, payees: [Address], payeesShares: [UFix64], recipientKeys: [String], nft_id: UInt64) {\n\n    let sellerCollectionRef: &Epix.Collection\n    let buyerVault: &FlowToken.Vault{FungibleToken.Provider}\n    let recipient: AuthAccount\n\n    prepare(seller: AuthAccount, custodian: AuthAccount, buyer: AuthAccount) {\n        pre {\n            payees.length > 0 : \"need to provide atleast one payee\"\n            payees.length == payeesShares.length : \"need to define each payee share\"\n            recipientKeys.length > 0 : \"need to define atleast one public key\"\n        }\n\n        self.recipient = createAccount(pubKeys: recipientKeys, payer: custodian)\n\n        var x = 0\n        var sum = 0.0\n        while x < payeesShares.length {\n            sum = sum + payeesShares[x]\n            x = x + 1\n        }\n        if(sum < 1.0 || sum > 1.0) {\n            panic(\"payees shares need to be equal to 100%\")\n        }\n\n        self.buyerVault = buyer.borrow<&FlowToken.Vault{FungibleToken.Provider}>(from: /storage/flowTokenVault)!\n\n        // borrow a reference to the sellers NFT collection\n        self.sellerCollectionRef = seller.borrow<&Epix.Collection>(from: Epix.CollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to the seller's collection\")\n    }\n\n    execute {\n        // deposit tokens to payees\n        var x = 0\n        while x < payees.length {\n            let payeeCap = getAccount(payees[x]).getCapability<&{FungibleToken.Receiver}>(/public/flowTokenReceiver)\n            if let vaultRef = payeeCap.borrow() {\n                vaultRef.deposit(from: <-self.buyerVault.withdraw(amount: UFix64(flowAmount * payeesShares[x])))\n            } else {\n                panic(\"couldn't get payee vault ref\")\n            }\n            x = x + 1\n        }\n\n        // withdraw the NFT from the owner's collection\n        let nft <- self.sellerCollectionRef.withdraw(withdrawID: nft_id)\n\n        // borrow a public reference to the receivers collection\n        let depositRef = self.recipient.getCapability(Epix.CollectionPublicPath)!.borrow<&{NonFungibleToken.CollectionPublic}>()!\n\n        // Deposit the NFT in the recipient's collection\n        depositRef.deposit(token: <-nft)\n    }\n}",
        "dependencies": {
            "0xFUNGIBLE_TOKEN_ADDRESS": {
                "FungibleToken": {
                    "testnet": {
                        "address": "0x9a0766d93b6608b7",
                        "contract": "FungibleToken",
                        "fq_address": "A.0x9a0766d93b6608b7.FungibleToken",
                        "pin": "83c9e3d61d3b5ebf24356a9f17b5b57b12d6d56547abc73e05f820a0ae7d9cf5",
                        "pin_block_height": 139076561
                    }
                }
            },
            "0xFLOW_TOKEN_ADDRESS": {
                "FlowToken": {
                    "testnet": {
                        "address": "0x7e60df042a9c0868",
                        "contract": "FlowToken",
                        "fq_address": "A.0x7e60df042a9c0868.FlowToken",
                        "pin": "0326c320322c4e8dde768ba2975c384184fb7e41765c2c87e79a2040bfc71be8",
                        "pin_block_height": 139076600
                    }
                }
            },
            "0xNON_FUNGIBLE_TOKEN_ADDRESS": {
                "NonFungibleToken": {
                    "testnet": {
                        "address": "0x631e88ae7f1d7c20",
                        "contract": "NonFungibleToken",
                        "fq_address": "A.0x631e88ae7f1d7c20.NonFungibleToken",
                        "pin": "83c9e3d61d3b5ebf24356a9f17b5b57b12d6d56547abc73e05f820a0ae7d9cf5",
                        "pin_block_height": 139076637
                    }
                }
            },
            "0xEPIX_ADDRESS": {
                "Epix": {
                    "testnet": {
                        "address": "0x244f523a150d41c1",
                        "contract": "Epix",
                        "fq_address": "A.0x244f523a150d41c1.Epix",
                        "pin": "7723617b4999f66ce1942ee3847d899b74dca4b43ff6f7ce75f32c7d8b5b43a6",
                        "pin_block_height": 139076744
                    }
                }
            }
        },
        "arguments": {
            "acct": {
                "index": 0,
                "type": "AuthAccount",
                "messages": {}
            }
        }
    }
}