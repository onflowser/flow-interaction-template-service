{
    "f_type": "InteractionTemplate",
    "f_version": "1.0.0",
    "id": "9902c5c3c8d089f775b410d8eab62571787bcf421d0c3ddc4b077374ecf45bb3",
    "data": {
        "type": "InteractionTemplate",
        "interface": "",
        "messages": {
            "title": {
                "i18n": {
                    "en-US": "FlowStaking Stake new flow"
                }
            },
            "description": {
                "i18n": {
                    "en-US": "Request to stake: {amount} FLOW",
                    "zh-CN": "请求质押: {amount} FLOW 代币",
                    "zh-TW": "請求質押: {amount} FLOW 代幣"
                }
            }
        },
        "cadence": "import FungibleToken from 0xFUNGIBLE_TOKEN_ADDRESS\nimport LockedTokens from 0xLOCKED_TOKEN_ADDRESS\nimport FlowToken from 0xFLOW_TOKEN_ADDRESS\nimport FlowStorageFees from 0xFLOW_STORAGE_FEES_ADDRESS\n\ntransaction(amount: UFix64) {\n\n  let holderRef: &LockedTokens.TokenHolder\n\n  let vaultRef: &FlowToken.Vault\n\n  prepare(account: AuthAccount) {\n    self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n      ?? panic(\"Could not borrow reference to TokenHolder\")\n\n    self.vaultRef = account.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n      ?? panic(\"Could not borrow flow token vault reference\")\n  }\n\n  execute {\n    let delegatorProxy = self.holderRef.borrowDelegator()\n    let lockedBalance = self.holderRef.getLockedAccountBalance()\n\n    if amount <= lockedBalance {\n      delegatorProxy.delegateNewTokens(amount: amount)\n    } else if ((amount - lockedBalance) <= self.vaultRef.balance - FlowStorageFees.minimumStorageReservation) {\n      self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount - lockedBalance))\n      delegatorProxy.delegateNewTokens(amount: amount)\n    } else {\n      panic(\"Not enough tokens to stake!\")\n    }\n  }\n}",
        "dependencies": {
            "0xFUNGIBLE_TOKEN_ADDRESS": {
                "FungibleToken": {
                    "testnet": {
                        "address": "0x9a0766d93b6608b7",
                        "contract": "FungibleToken",
                        "fq_address": "A.0x9a0766d93b6608b7.FungibleToken",
                        "pin": "83c9e3d61d3b5ebf24356a9f17b5b57b12d6d56547abc73e05f820a0ae7d9cf5",
                        "pin_block_height": 138839476
                    }
                }
            },
            "0xLOCKED_TOKEN_ADDRESS": {
                "LockedTokens": {
                    "testnet": {
                        "address": "0x95e019a17d0e23d7",
                        "contract": "LockedTokens",
                        "fq_address": "A.0x95e019a17d0e23d7.LockedTokens",
                        "pin": "8c6baff06e290c032e1dabac5b99c800ef040b06bec84d351d03927c4daf7e75",
                        "pin_block_height": 138839669
                    }
                }
            },
            "0xFLOW_TOKEN_ADDRESS": {
                "FlowToken": {
                    "testnet": {
                        "address": "0x7e60df042a9c0868",
                        "contract": "FlowToken",
                        "fq_address": "A.0x7e60df042a9c0868.FlowToken",
                        "pin": "0326c320322c4e8dde768ba2975c384184fb7e41765c2c87e79a2040bfc71be8",
                        "pin_block_height": 138839698
                    }
                }
            },
            "0xFLOW_STORAGE_FEES_ADDRESS": {
                "FlowStorageFees": {
                    "testnet": {
                        "address": "0x8c5303eaa26202d6",
                        "contract": "FlowStorageFees",
                        "fq_address": "A.0x8c5303eaa26202d6.FlowStorageFees",
                        "pin": "ec7be5050256b8b9ab2a6f5550a42b6a64627fa7e684a88de5dd767864f0471a",
                        "pin_block_height": 138839731
                    }
                }
            }
        },
        "arguments": {
            "amount": {
                "index": 0,
                "type": "UFix64",
                "messages": {}
            }
        }
    }
}